// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapReduce.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_MapReduce_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_MapReduce_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_MapReduce_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_MapReduce_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_MapReduce_2eproto;
namespace MapReduce {
class AckAndQueryNewTaskRequest;
struct AckAndQueryNewTaskRequestDefaultTypeInternal;
extern AckAndQueryNewTaskRequestDefaultTypeInternal _AckAndQueryNewTaskRequest_default_instance_;
class AckAndQueryNewTaskResponse;
struct AckAndQueryNewTaskResponseDefaultTypeInternal;
extern AckAndQueryNewTaskResponseDefaultTypeInternal _AckAndQueryNewTaskResponse_default_instance_;
}  // namespace MapReduce
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace MapReduce {

// ===================================================================


// -------------------------------------------------------------------

class AckAndQueryNewTaskResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MapReduce.AckAndQueryNewTaskResponse) */ {
 public:
  inline AckAndQueryNewTaskResponse() : AckAndQueryNewTaskResponse(nullptr) {}
  ~AckAndQueryNewTaskResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AckAndQueryNewTaskResponse(::google::protobuf::internal::ConstantInitialized);

  inline AckAndQueryNewTaskResponse(const AckAndQueryNewTaskResponse& from)
      : AckAndQueryNewTaskResponse(nullptr, from) {}
  AckAndQueryNewTaskResponse(AckAndQueryNewTaskResponse&& from) noexcept
    : AckAndQueryNewTaskResponse() {
    *this = ::std::move(from);
  }

  inline AckAndQueryNewTaskResponse& operator=(const AckAndQueryNewTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckAndQueryNewTaskResponse& operator=(AckAndQueryNewTaskResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckAndQueryNewTaskResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckAndQueryNewTaskResponse* internal_default_instance() {
    return reinterpret_cast<const AckAndQueryNewTaskResponse*>(
               &_AckAndQueryNewTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AckAndQueryNewTaskResponse& a, AckAndQueryNewTaskResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AckAndQueryNewTaskResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckAndQueryNewTaskResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AckAndQueryNewTaskResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AckAndQueryNewTaskResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AckAndQueryNewTaskResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AckAndQueryNewTaskResponse& from) {
    AckAndQueryNewTaskResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AckAndQueryNewTaskResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MapReduce.AckAndQueryNewTaskResponse";
  }
  protected:
  explicit AckAndQueryNewTaskResponse(::google::protobuf::Arena* arena);
  AckAndQueryNewTaskResponse(::google::protobuf::Arena* arena, const AckAndQueryNewTaskResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskTypeFieldNumber = 1,
    kFileNameFieldNumber = 3,
    kTaskIdFieldNumber = 2,
  };
  // string taskType = 1;
  void clear_tasktype() ;
  const std::string& tasktype() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tasktype(Arg_&& arg, Args_... args);
  std::string* mutable_tasktype();
  PROTOBUF_NODISCARD std::string* release_tasktype();
  void set_allocated_tasktype(std::string* value);

  private:
  const std::string& _internal_tasktype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tasktype(
      const std::string& value);
  std::string* _internal_mutable_tasktype();

  public:
  // string fileName = 3;
  void clear_filename() ;
  const std::string& filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_filename(Arg_&& arg, Args_... args);
  std::string* mutable_filename();
  PROTOBUF_NODISCARD std::string* release_filename();
  void set_allocated_filename(std::string* value);

  private:
  const std::string& _internal_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filename(
      const std::string& value);
  std::string* _internal_mutable_filename();

  public:
  // int32 taskId = 2;
  void clear_taskid() ;
  ::int32_t taskid() const;
  void set_taskid(::int32_t value);

  private:
  ::int32_t _internal_taskid() const;
  void _internal_set_taskid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MapReduce.AckAndQueryNewTaskResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      61, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr tasktype_;
    ::google::protobuf::internal::ArenaStringPtr filename_;
    ::int32_t taskid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MapReduce_2eproto;
};// -------------------------------------------------------------------

class AckAndQueryNewTaskRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MapReduce.AckAndQueryNewTaskRequest) */ {
 public:
  inline AckAndQueryNewTaskRequest() : AckAndQueryNewTaskRequest(nullptr) {}
  ~AckAndQueryNewTaskRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AckAndQueryNewTaskRequest(::google::protobuf::internal::ConstantInitialized);

  inline AckAndQueryNewTaskRequest(const AckAndQueryNewTaskRequest& from)
      : AckAndQueryNewTaskRequest(nullptr, from) {}
  AckAndQueryNewTaskRequest(AckAndQueryNewTaskRequest&& from) noexcept
    : AckAndQueryNewTaskRequest() {
    *this = ::std::move(from);
  }

  inline AckAndQueryNewTaskRequest& operator=(const AckAndQueryNewTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckAndQueryNewTaskRequest& operator=(AckAndQueryNewTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckAndQueryNewTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckAndQueryNewTaskRequest* internal_default_instance() {
    return reinterpret_cast<const AckAndQueryNewTaskRequest*>(
               &_AckAndQueryNewTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AckAndQueryNewTaskRequest& a, AckAndQueryNewTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AckAndQueryNewTaskRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckAndQueryNewTaskRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AckAndQueryNewTaskRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AckAndQueryNewTaskRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AckAndQueryNewTaskRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AckAndQueryNewTaskRequest& from) {
    AckAndQueryNewTaskRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AckAndQueryNewTaskRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MapReduce.AckAndQueryNewTaskRequest";
  }
  protected:
  explicit AckAndQueryNewTaskRequest(::google::protobuf::Arena* arena);
  AckAndQueryNewTaskRequest(::google::protobuf::Arena* arena, const AckAndQueryNewTaskRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskTypeFieldNumber = 2,
    kWorkerIdFieldNumber = 3,
    kPreviousTaskIdFieldNumber = 1,
  };
  // string taskType = 2;
  void clear_tasktype() ;
  const std::string& tasktype() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tasktype(Arg_&& arg, Args_... args);
  std::string* mutable_tasktype();
  PROTOBUF_NODISCARD std::string* release_tasktype();
  void set_allocated_tasktype(std::string* value);

  private:
  const std::string& _internal_tasktype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tasktype(
      const std::string& value);
  std::string* _internal_mutable_tasktype();

  public:
  // string workerId = 3;
  void clear_workerid() ;
  const std::string& workerid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_workerid(Arg_&& arg, Args_... args);
  std::string* mutable_workerid();
  PROTOBUF_NODISCARD std::string* release_workerid();
  void set_allocated_workerid(std::string* value);

  private:
  const std::string& _internal_workerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workerid(
      const std::string& value);
  std::string* _internal_mutable_workerid();

  public:
  // int32 previousTaskId = 1;
  void clear_previoustaskid() ;
  ::int32_t previoustaskid() const;
  void set_previoustaskid(::int32_t value);

  private:
  ::int32_t _internal_previoustaskid() const;
  void _internal_set_previoustaskid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:MapReduce.AckAndQueryNewTaskRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr tasktype_;
    ::google::protobuf::internal::ArenaStringPtr workerid_;
    ::int32_t previoustaskid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_MapReduce_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AckAndQueryNewTaskRequest

// int32 previousTaskId = 1;
inline void AckAndQueryNewTaskRequest::clear_previoustaskid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.previoustaskid_ = 0;
}
inline ::int32_t AckAndQueryNewTaskRequest::previoustaskid() const {
  // @@protoc_insertion_point(field_get:MapReduce.AckAndQueryNewTaskRequest.previousTaskId)
  return _internal_previoustaskid();
}
inline void AckAndQueryNewTaskRequest::set_previoustaskid(::int32_t value) {
  _internal_set_previoustaskid(value);
  // @@protoc_insertion_point(field_set:MapReduce.AckAndQueryNewTaskRequest.previousTaskId)
}
inline ::int32_t AckAndQueryNewTaskRequest::_internal_previoustaskid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.previoustaskid_;
}
inline void AckAndQueryNewTaskRequest::_internal_set_previoustaskid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.previoustaskid_ = value;
}

// string taskType = 2;
inline void AckAndQueryNewTaskRequest::clear_tasktype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tasktype_.ClearToEmpty();
}
inline const std::string& AckAndQueryNewTaskRequest::tasktype() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MapReduce.AckAndQueryNewTaskRequest.taskType)
  return _internal_tasktype();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AckAndQueryNewTaskRequest::set_tasktype(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tasktype_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MapReduce.AckAndQueryNewTaskRequest.taskType)
}
inline std::string* AckAndQueryNewTaskRequest::mutable_tasktype() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tasktype();
  // @@protoc_insertion_point(field_mutable:MapReduce.AckAndQueryNewTaskRequest.taskType)
  return _s;
}
inline const std::string& AckAndQueryNewTaskRequest::_internal_tasktype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tasktype_.Get();
}
inline void AckAndQueryNewTaskRequest::_internal_set_tasktype(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tasktype_.Set(value, GetArena());
}
inline std::string* AckAndQueryNewTaskRequest::_internal_mutable_tasktype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tasktype_.Mutable( GetArena());
}
inline std::string* AckAndQueryNewTaskRequest::release_tasktype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MapReduce.AckAndQueryNewTaskRequest.taskType)
  return _impl_.tasktype_.Release();
}
inline void AckAndQueryNewTaskRequest::set_allocated_tasktype(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tasktype_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tasktype_.IsDefault()) {
          _impl_.tasktype_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MapReduce.AckAndQueryNewTaskRequest.taskType)
}

// string workerId = 3;
inline void AckAndQueryNewTaskRequest::clear_workerid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.workerid_.ClearToEmpty();
}
inline const std::string& AckAndQueryNewTaskRequest::workerid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MapReduce.AckAndQueryNewTaskRequest.workerId)
  return _internal_workerid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AckAndQueryNewTaskRequest::set_workerid(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.workerid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MapReduce.AckAndQueryNewTaskRequest.workerId)
}
inline std::string* AckAndQueryNewTaskRequest::mutable_workerid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_workerid();
  // @@protoc_insertion_point(field_mutable:MapReduce.AckAndQueryNewTaskRequest.workerId)
  return _s;
}
inline const std::string& AckAndQueryNewTaskRequest::_internal_workerid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.workerid_.Get();
}
inline void AckAndQueryNewTaskRequest::_internal_set_workerid(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.workerid_.Set(value, GetArena());
}
inline std::string* AckAndQueryNewTaskRequest::_internal_mutable_workerid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.workerid_.Mutable( GetArena());
}
inline std::string* AckAndQueryNewTaskRequest::release_workerid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MapReduce.AckAndQueryNewTaskRequest.workerId)
  return _impl_.workerid_.Release();
}
inline void AckAndQueryNewTaskRequest::set_allocated_workerid(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.workerid_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.workerid_.IsDefault()) {
          _impl_.workerid_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MapReduce.AckAndQueryNewTaskRequest.workerId)
}

// -------------------------------------------------------------------

// AckAndQueryNewTaskResponse

// string taskType = 1;
inline void AckAndQueryNewTaskResponse::clear_tasktype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tasktype_.ClearToEmpty();
}
inline const std::string& AckAndQueryNewTaskResponse::tasktype() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MapReduce.AckAndQueryNewTaskResponse.taskType)
  return _internal_tasktype();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AckAndQueryNewTaskResponse::set_tasktype(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tasktype_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MapReduce.AckAndQueryNewTaskResponse.taskType)
}
inline std::string* AckAndQueryNewTaskResponse::mutable_tasktype() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tasktype();
  // @@protoc_insertion_point(field_mutable:MapReduce.AckAndQueryNewTaskResponse.taskType)
  return _s;
}
inline const std::string& AckAndQueryNewTaskResponse::_internal_tasktype() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tasktype_.Get();
}
inline void AckAndQueryNewTaskResponse::_internal_set_tasktype(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tasktype_.Set(value, GetArena());
}
inline std::string* AckAndQueryNewTaskResponse::_internal_mutable_tasktype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.tasktype_.Mutable( GetArena());
}
inline std::string* AckAndQueryNewTaskResponse::release_tasktype() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MapReduce.AckAndQueryNewTaskResponse.taskType)
  return _impl_.tasktype_.Release();
}
inline void AckAndQueryNewTaskResponse::set_allocated_tasktype(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tasktype_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tasktype_.IsDefault()) {
          _impl_.tasktype_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MapReduce.AckAndQueryNewTaskResponse.taskType)
}

// int32 taskId = 2;
inline void AckAndQueryNewTaskResponse::clear_taskid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.taskid_ = 0;
}
inline ::int32_t AckAndQueryNewTaskResponse::taskid() const {
  // @@protoc_insertion_point(field_get:MapReduce.AckAndQueryNewTaskResponse.taskId)
  return _internal_taskid();
}
inline void AckAndQueryNewTaskResponse::set_taskid(::int32_t value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:MapReduce.AckAndQueryNewTaskResponse.taskId)
}
inline ::int32_t AckAndQueryNewTaskResponse::_internal_taskid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.taskid_;
}
inline void AckAndQueryNewTaskResponse::_internal_set_taskid(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.taskid_ = value;
}

// string fileName = 3;
inline void AckAndQueryNewTaskResponse::clear_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.ClearToEmpty();
}
inline const std::string& AckAndQueryNewTaskResponse::filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MapReduce.AckAndQueryNewTaskResponse.fileName)
  return _internal_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AckAndQueryNewTaskResponse::set_filename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:MapReduce.AckAndQueryNewTaskResponse.fileName)
}
inline std::string* AckAndQueryNewTaskResponse::mutable_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_filename();
  // @@protoc_insertion_point(field_mutable:MapReduce.AckAndQueryNewTaskResponse.fileName)
  return _s;
}
inline const std::string& AckAndQueryNewTaskResponse::_internal_filename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.filename_.Get();
}
inline void AckAndQueryNewTaskResponse::_internal_set_filename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.filename_.Set(value, GetArena());
}
inline std::string* AckAndQueryNewTaskResponse::_internal_mutable_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.filename_.Mutable( GetArena());
}
inline std::string* AckAndQueryNewTaskResponse::release_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:MapReduce.AckAndQueryNewTaskResponse.fileName)
  return _impl_.filename_.Release();
}
inline void AckAndQueryNewTaskResponse::set_allocated_filename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.filename_.IsDefault()) {
          _impl_.filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:MapReduce.AckAndQueryNewTaskResponse.fileName)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace MapReduce


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_MapReduce_2eproto_2epb_2eh
